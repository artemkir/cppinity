set(TARGET_NAME Snake)

file(GLOB_RECURSE SAMPLE_SOURCES CONFIGURE_DEPENDS src/*.cpp src/*.c)
file(GLOB_RECURSE SAMPLE_HEADERS CONFIGURE_DEPENDS include/*.h)

add_executable(${TARGET_NAME} ${SAMPLE_SOURCES} ${SAMPLE_HEADERS})

# Auto-generate umbrella header for the sample: Game.h
set(SAMPLE_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/include")
if(EXISTS "${SAMPLE_INCLUDE_DIR}")
    set(SAMPLE_GENERATED_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/generated")
    file(MAKE_DIRECTORY "${SAMPLE_GENERATED_INCLUDE_DIR}")

    # Collect headers and exclude common third-party dirs (works on Win/Unix paths)
    file(GLOB_RECURSE SAMPLE_PUBLIC_HEADERS CONFIGURE_DEPENDS
        "${SAMPLE_INCLUDE_DIR}/*.h"
        "${SAMPLE_INCLUDE_DIR}/*.hpp"
    )
    list(FILTER SAMPLE_PUBLIC_HEADERS EXCLUDE REGEX "[\\\\/](stb|external|third[_-]?party)[\\\\/]")

    # Make include paths relative and sorted for stable output
    set(SAMPLE_PUBLIC_HEADERS_REL)
    foreach(h ${SAMPLE_PUBLIC_HEADERS})
        file(RELATIVE_PATH rel "${SAMPLE_INCLUDE_DIR}" "${h}")
        list(APPEND SAMPLE_PUBLIC_HEADERS_REL "${rel}")
    endforeach()
    list(SORT SAMPLE_PUBLIC_HEADERS_REL)

    # Write Sample.h
    set(SAMPLE_UMBRELLA "${SAMPLE_GENERATED_INCLUDE_DIR}/Game.h")
    set(_content "// Auto-generated by CMake for ${TARGET_NAME}. Do not edit.\n#pragma once\n\n")
    foreach(rel ${SAMPLE_PUBLIC_HEADERS_REL})
        string(APPEND _content "#include \"${rel}\"\n")
    endforeach()
    file(WRITE "${SAMPLE_UMBRELLA}" "${_content}")
    set_source_files_properties("${SAMPLE_UMBRELLA}" PROPERTIES GENERATED TRUE)

    # Make Game.h visible to this target
    target_include_directories(${TARGET_NAME} PRIVATE
        "${SAMPLE_INCLUDE_DIR}"
        "${SAMPLE_GENERATED_INCLUDE_DIR}"
    )
endif()

target_link_libraries(${TARGET_NAME} PRIVATE Engine)

if(EMSCRIPTEN)
    # Example assets folder next to samples/snake/CMakeLists.txt
    set(SNAKE_ASSETS_DIR "${CMAKE_CURRENT_SOURCE_DIR}/assets")
    set(SNAKE_SHELL_DIR "${CMAKE_CURRENT_SOURCE_DIR}/shell")

    if(EXISTS "${SNAKE_ASSETS_DIR}")
        # Map host assets dir -> in-app VFS path /assets
        # Pass as two args to avoid quoting issues on Windows
        target_link_options(${TARGET_NAME} PRIVATE
            "--preload-file" "${SNAKE_ASSETS_DIR}/@/assets"
            #"--shell-file" "${SNAKE_SHELL_DIR}/shell_empty.html"
        )
    endif()
else()
    # Optional: copy assets next to the binary
    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/assets)
        add_custom_command(TARGET ${TARGET_NAME} POST_BUILD
            COMMAND ${CMAKE_COMMAND} -E copy_directory
                ${CMAKE_CURRENT_SOURCE_DIR}/assets
                $<TARGET_FILE_DIR:${TARGET_NAME}>/assets
        )
    endif()
endif()

if(WIN32)
    set_target_properties(${TARGET_NAME} PROPERTIES WIN32_EXECUTABLE TRUE)
endif()

# Optional: set debugger working dir in VS
set_target_properties(${TARGET_NAME} PROPERTIES
    VS_DEBUGGER_COMMAND "$<TARGET_FILE:${TARGET_NAME}>"
    VS_DEBUGGER_WORKING_DIRECTORY "$<TARGET_FILE_DIR:${TARGET_NAME}>"
)